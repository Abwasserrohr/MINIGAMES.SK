#
# ==============
# functions.sk
# ==============
# functions.sk is part of the MINIGAMES.SK library.
# ==============
# > GAME: GoldRush
# ==============

options:
  islandsize: 100
  walldepth: 5
  wallheight: 40
  gametime: 600
  baseupgradeprice: 20
  upgrademultiplier: 2
  backgrounditem: gray stained glass pane

import:
  java.util.ArrayList
  
function mgGoldRushSpawnGold():
  set {_drills} to mgGetTemporaryGameData("GoldDrills")
  set {_drills::*} to ...{_drills}
  loop {_drills::*}:
    drop 1 of gold ingot at loop-value
  add location at -28.5, 6, 40.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at -28.5, 6, -33.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at -38.5, 6, 14.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at -43.5, 6, -2.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at -9.5, 11, -46.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at 3.5, 6, -45.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at 19.5, 6, -43.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at 33.5, 6, -46.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at 46.5, 6, -7.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at 45.5, 6, 23.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at 22.5, 6, 44.5 in mgGetCurrentWorld() to {_goldrushspawns::*}
  add location at -8.5, 6, 40.5 in mgGetCurrentWorld() to {_goldrushspawns::*}

  loop {_goldrushspawns::*}:
    delete {_level}
    delete {_minerfound}
    set {_level} to mgGetTemporaryGameData("MineLevel|%loop-value%")
    set {_level} to {_level} parsed as number
    if {_level} is not set:
      set {_level} to 1
    spawn 1 zombie at loop-value
    set {_z} to last spawned entity
    set metadata value "Gold" of {_z} to {_level}
    set {_z}'s helmet to gold ore
    {_z}.setAI(false)
    {_z}.setSilent(true)
    {_z}.setCustomNameVisible(true)
    {_z}.setCustomName("&l%{_level}% Gold")
    set {_z}'s tool to gold ingot
    set {_z}'s offhand tool to gold ingot
    set maximum health of {_z} to 1


    set {_minerloc} to loop-value
    loop all entities in radius 0.2 around {_minerloc}:
      if loop-entity is a villager:
        set {_minerfound} to true
    if {_minerfound} is not set:
      mgGoldRushSpawnMineVillager({_minerloc},"Miner",loop-value)
function mgGoldRushFluidMovement(entity:entity,direction:number):
  set {_loc} to {_entity}.getLocation().clone()
  loop 10 times:
    if {_direction} is 0:
      remove 0.1 from z-coord of {_loc}
      {_loc}.setYaw(180.01)
    else if {_direction} is 1:
      add 0.1 to x-coord of {_loc}
      {_loc}.setYaw(-90.01)
    else if {_direction} is 2:
      add 0.1 to z-coord of {_loc}
      {_loc}.setYaw(0.01)
    else if {_direction} is 3:
      remove 0.1 from x-coord of {_loc}
      {_loc}.setYaw(90.01)
    teleport {_entity} to {_loc}
    if loop-number is 10:
      if block below {_entity} is white wool:
        set {_loc} to {_entity}'s location
        set {_owner} to mgGetTemporaryGameData("GoldRushBase|%{_loc}%")
        set {_gold} to metadata value "Gold" of {_entity}
	  
        remove 500 from y-coord of {_loc}
        teleport {_entity} to {_loc}
        set {_goldaccount} to mgGetTemporaryGameData("Gold|%{_owner}%")
        set {_goldaccount} to {_goldaccount} parsed as number
        if {_goldaccount} is not set:
          set {_goldaccount} to 0
        add {_gold} to {_goldaccount}
        mgSetTemporaryGameData("Gold|%{_owner}%","%{_goldaccount}%")
        set {_owner} to "%{_owner}%" parsed as player
        set {_uuid} to uuid of {_owner}
        add {_gold} to {cobble::%{_uuid}%}
        mgAddCurrentGamePoints("GoldRush",{_owner},"points",{_gold})
        #mgAddPlayerToplistScore("GoldRush",{_owner} parsed as player,%{_gold}%)
        mgSetSidebarToplist("GoldRush","points",5,1)
    wait 2 ticks

function mgGoldRushSpawnMineVillager(loc:location,name:text,mineloc:location):
  loop all entities in radius 0.2 around {_loc}:
    if loop-entity is a villager:
      kill loop-entity
  spawn villager at {_loc}
  set {_villager} to last spawned entity
  set {_head} to 1 of button
  set {_head} to setnbtvalue({_head},"GoldRush","true")
  set {_head} to setnbtvalue({_head},"MineLoc","%{_mineloc}%")
  set {_villager}'s helmet to {_head}
  {_villager}.setCustomName({_name})
  {_villager}.setCustomNameVisible(true)
  {_villager}.setInvulnerable(true)
  {_villager}.setSilent(true)
  {_villager}.setAI(false)
  {_villager}.setRotation(-180)
  {_villager}.setVillagerType(2)
  
function mgGoldRushSpawnBaseVillager(loc:location,name:text,owner:player):
  loop all entities in radius 0.2 around {_loc}:
    if loop-entity is a villager:
      kill loop-entity
  spawn villager at {_loc}
  set {_villager} to last spawned entity
  set {_head} to 1 of button
  set {_head} to setnbtvalue({_head},"GoldRush","true")
  set {_head} to setnbtvalue({_head},"Base","%{_owner}%")
  set {_villager}'s helmet to {_head}
  {_villager}.setCustomName({_name})
  {_villager}.setCustomNameVisible(true)
  {_villager}.setInvulnerable(true)
  {_villager}.setSilent(true)
  {_villager}.setAI(false)
  {_villager}.setRotation(-180)
  {_villager}.setVillagerType(2)



function mgGoldRushGiveBaseItem(player:player):
  set {_item} to 1 of chest named "%{_player}%'s base"
  set 1st line of lore of {_item} to "&7Place your base for this round."
  set {_item} to setnbtvalue({_item},"BaseItem","true")
  set {_item} to setnbtvalue({_item},"Specialtool","Base")
  set {_item} to setnbtvalue({_item},"Placeable","true")
  give 1 of {_item} to {_player}

function mgGoldRushPlaceBase(player:player,loc:location):
  clear {_player}'s inventory
  if mgGetTemporaryGameData("Base|%{_player}%") is not set:
    remove 0.5 from y-coord of {_loc}
    set {_bases} to mgGetTemporaryGameData("GoldRushBases")
    if {_bases} is not set:
      set {_bases} to new ArrayList()
    {_bases}.add({_loc})
    mgSetTemporaryGameData("GoldRushBases",{_bases})
    mgSetTemporaryGameData("GoldRushBase|%{_loc}%",{_player})
    mgSetTemporaryGameData("Base|%{_player}%",{_loc})
    mgGoldRushSpawnBaseVillager({_loc},"&l%{_player}%'s Base",{_player})
    set block at {_loc} to air
    set block 1 below {_loc} to white wool

function mgGoldRushOpenMineMenu(player:player,mineloc:text):
  set {_level} to mgGetTemporaryGameData("MineLevel|%{_mineloc}%")
  set {_level} to {_level} parsed as number
  if {_level} is not set:
    set {_level} to 1

  opengui({_player},54,"&lMine Level %{_level}%")
  loop 27 times:
    setguiitem({_player},loop-number - 1,{@backgrounditem},1," ","")
  
  set {_slot} to 9
  loop 7 times:
    add 1 to {_slot}
    if {_level} >= loop-number:
      setguiitem({_player},{_slot},glowing gold ingot,1,"Level %loop-number%","&7Produces &6%loop-number%&7 gold per second")
    else if ({_level} + 1) is loop-number:
      set {_price} to {@upgrademultiplier} * loop-number
      set {_price} to {@baseupgradeprice} * {_price}
      setguiitem({_player},{_slot},gold ingot,1,"Level %loop-number%","&7Click here to &6upgrade&7.\n&7Price: &6%{_price}%&7 Gold\n&7Produces &6%loop-number%&7","mgGoldRushMineUpgrade(""%{_player}%"" parsed as player,""%{_mineloc}%"")")
    else:
      setguiitem({_player},{_slot},gold ingot,1,"Level %loop-number%","&7Upgrade not available yet.")

function mgGoldRushOpenBaseMenu(player:player):
  opengui({_player},27,"&l%{_player}%'s Base")
  loop 27 times:
    setguiitem({_player},loop-number - 1,{@backgrounditem},1," ","")

    set {_price} to 10
    setguiitem({_player},10,magenta glazed terracotta,1,"","&7Price: %{_price}%\n&7Connect mines with\n&7your base villager.\n&7Build a path.","mgGoldRushShop(""%{_player}%"" parsed as player,""1 of magenta glazed terracotta"",%{_price}%)")
    setguiitem({_player},11,diamond sword,1,"","&7Price: %{_price}%\n&7Kill the suppliers\n&7to get their gold.","mgGoldRushShop(""%{_player}%"" parsed as player,""1 of diamond sword"",%{_price}%)")
    set {_price} to 100
    setguiitem({_player},12,gold block,1,"&rGold drill","&7Price: %{_price}%\n&7Drills gold out of the floor.","mgGoldRushShop(""%{_player}%"" parsed as player,""1 of gold block"",%{_price}%)")

function mgGoldRushShop(player:player,item:text,price:object):
  set {_item} to {_item} parsed as item
  if {_item} is gold block:
    set {_item}'s name to "&rGold drill"
    set 1st line of lore of {_item} to "&rDrills gold out of the floor."
    set 1st line of lore of {_item} to "&rDrills gold out of the floor."
    set {_item} to setnbtvalue({_item},"Placeable","true")
    set {_item} to setnbtvalue({_item},"Specialtool","Golddrill")
    set {_item} to setnbtvalue({_item},"Golddrill","true")
  set {_gold} to mgGetTemporaryGameData("Gold|%{_player}%")
  set {_gold} to {_gold} parsed as number
  if {_gold} is not set:
    set {_gold} to 0
  
  if {_gold} >= {_price}:
    set {_item} to setnbtvalue({_item},"Placeable","true")
    give {_item} to {_player}
    remove {_price} from {_gold}
    mgSetTemporaryGameData("Gold|%{_player}%",{_gold})
  else:
    message "%getChatPrefix()% You only have %{_gold}% gold, you need %{_price}%." to {_player}


function mgGoldRushMineUpgrade(player:player,mineloc:text):
  set {_level} to mgGetTemporaryGameData("MineLevel|%{_mineloc}%")
  set {_level} to {_level} parsed as number
  if {_level} is not set:
    set {_level} to 1
  set {_price} to {_level} + 1
  set {_price} to {@upgrademultiplier} * {_price}
  set {_price} to {@baseupgradeprice} * {_price}
  
  set {_gold} to mgGetTemporaryGameData("Gold|%{_player}%")
  set {_gold} to {_gold} parsed as number
  if {_gold} is not set:
    set {_gold} to 0
  
  if {_gold} >= {_price}:
    mgSetTemporaryGameData("MineLevel|%{_mineloc}%","%{_level} + 1%")
    play sound "entity.experience_orb.pickup" with volume 1 with pitch 0.7 at location of {_player} for {_player}
    remove {_price} from {_gold}
    mgSetTemporaryGameData("Gold|%{_player}%",{_gold})

  else:
    message "%getChatPrefix()% You only have %{_gold}% gold, you need %{_price}%." to {_player}
  mgGoldRushOpenMineMenu({_player},{_mineloc})

function mgGoldRushInformation():
  mgSetSidebarToplist("GoldRush","points",5,1)
  set {_time} to mgGetTemporaryGameData("TimeLeft")
  loop all players:
    set {_gold} to mgGetTemporaryGameData("Gold|%loop-player%")
    set {_gold} to {_gold} parsed as number
    if {_gold} is not set:
      set {_gold} to 0
    send action bar "%getChatPrefix()% Gold: %{_gold}% | Time: %{_time}%" to loop-player

function mgGoldRushPlaceDrill(loc:location):
  set {_drills} to mgGetTemporaryGameData("GoldDrills")
  if {_drills} is not set:
    set {_drills} to new ArrayList()
  {_drills}.add({_loc})
  mgSetTemporaryGameData("GoldDrills",{_drills})

options:
  gamerounds: 1

#
# > Function - mgGoldRushHandler
# > Starts or stops the game depending on the parameter.
# > Parameters:
# > <text>task, either "start" or "stop"
function mgGoldRushHandler(task:text):
  if {_task} is "start":
    mgSetTemporaryGameData("round",0)
    mgSetTemporaryGameData("status","loading")

    loop all players:
      mgSetCurrentGamePoints("GoldRush",loop-player,"points",0)
    mgSetSidebarToplist("GoldRush","points",5,1)

    mgSetTemporaryGameData("playersingame",number of all players)
    mgGoldRushStartNewRound()

  #
  # > If the game should be stopped, use the MINIGAMES.SK function to
  # > clear out any temporary data and unload the game.
  if {_task} is "stop":
    mgFinishGame()

#
# > Function - mgGoldRushStartNewRound
# > Starts a new GoldRush round.
function mgGoldRushStartNewRound():
  set {_tplayers} to 0
  set {_tplayers} to number of all players
  if {_tplayers} is bigger than 0:

    mgSetTemporaryGameData("playersingame",number of all players)
    loop all players:
      mgSetTemporaryGameData("playerstatus|%loop-player%",true)
    mgSetTemporaryGameData("status","preparing")

    set {_round} to mgGetTemporaryGameData("round")
    add 1 to {_round}
    mgSetTemporaryGameData("round",{_round})

    if {_round} is bigger than {@gamerounds}:
      mgSpleefHandler("stop")
      stop
    broadcast "%getChatPrefix()% Round %{_round}%/{@gamerounds}"

    #
    # > Create a fitting arena. Base size 40x40 + 2x2 per player
    set {_mapsize} to 10 + number of all players
    set {_mainarena} to ""
    set {_mainarena} to location at 0.5, 6, 0.5 in mgGetCurrentWorld()
    mgSetTemporaryGameData("respawnloc",location at 0.5, 6, 0.5 in mgGetCurrentWorld())

    set {_xstart} to -50000
    set {_zstart} to -50000
	
    loop {_round} times:
      add 50000 to {_xstart}
      add 50000 to {_zstart}

    loop all players:
      add 1 to {_playerloop}
      set {_islandloc} to location at {_xstart}, 20, {_zstart} in mgGetCurrentWorld()
      mgSetTemporaryGameData("Island|%loop-player%",{_islandloc})
      mgSetTemporaryGameData("Islandloc|%{_xstart}%|%{_zstart}%",true)
      set {_spawnloc} to {_islandloc}
      set y-coord of {_spawnloc} to 21
      mgSetTemporaryGameData("Respawnloc|%loop-player%",{_spawnloc})
      remove 3 from z-coord of {_spawnloc}

    #
    # > Create a countdown that lets the players wait for 5 seconds.
    mgDisplayBossbarCountdown(10,"GoldRush","bossbar_countdown",null)

    apply resistance 12 without particles to all players for 1 seconds
    apply invisibility 1 without particles to all players for 0.1 seconds
    set gamemode of all players to survival

    set {_loc} to mgGetTemporaryGameData("respawnloc")
    teleport all players to {_loc}
    clear inventory of all players
    loop all players:
      mgGoldRushGiveBaseItem(loop-player)

    #
    # > Give the items to the players.
    mgSetTemporaryGameData("status","ingame")
    set {_rending} to {@gametime}
    while mgGetTemporaryGameData("status") is "ingame":
      add 1 to {_roundtime}
      remove 1 from {_rending}
      mgSetTemporaryGameData("TimeLeft",{_rending})

      loop all players:
        if gamemode of loop-player is survival:
          if -1 is bigger than y-coordinate of loop-player:
            damage loop-player by 5 hearts
      if {_roundtime} is bigger than {@gametime}:
        mgSetTemporaryGameData("status","exitround")
		
        mgGoldRushStartNewRound()
      wait 1 second

  else:
    broadcast "%getChatPrefix()% Not enough players."
    mgSpleefHandler("stop")

#
# > Function - mgCheckGoldRushRoundEnd
# > Checks if the GoldRush round should be stopped.
function mgCheckGoldRushRoundEnd():
  if mgGetTemporaryGameData("status") is "ingame":
    if mgGetTemporaryGameData("playersingame") is smaller than 2:
      loop all players:
        if loop-player's gamemode is survival:
          mgAddPlayerToplistWin("GoldRush",loop-player,1)
          broadcast "%getChatPrefix()% %loop-player% has won this round."
          mgSetTemporaryGameData("status","preparing")
      mgGoldRushStartNewRound()

#
# > Function - mgGoldRushHandleGameDeath
# > If a player died in GoldRush, do everything needed.
# > Parameters:
# > <player>the player who died
function mgGoldRushHandleGameDeath(player:player):
  set {_loc} to mgGetTemporaryGameData("Respawnloc|%{_player}%")
  teleport {_player} to {_loc}

function mgGoldRushFloor(loc:location):
  set block at {_loc} to yellow concrete
  wait 5 ticks
  set block at {_loc} to red concrete
  wait 5 ticks
  set block at {_loc} to air
